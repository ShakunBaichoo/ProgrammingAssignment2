dir()
source("cachematrix.R")
m<-matrix(c(1,1/4,2/3,3,5/7,2,4,2/3,5),nrow=3)
m1<-makeCacheMatrix
cacheSolve(m1)
cacheSolve(m1)
source("cachematrix.R")
m<-matrix(c(1,1/4,2/3,3,5/7,2,4,2/3,5),nrow=3)
m1<-makeCacheMatrix
cacheSolve(m1)
source("cachematrix.R")
m<-matrix(c(1,1/4,2/3,3,5/7,2,4,2/3,5),nrow=3)
m1<-makeCacheMatrix
cacheSolve(m1)
source("cachematrix.R")
m<-matrix(c(1,1/4,2/3,3,5/7,2,4,2/3,5),nrow=3)
m1<-makeCacheMatrix
cacheSolve(m1)
source("cachematrix.R")
m1<-makeCacheMatrix
cacheSolve(m1)
source("cachematrix.R")
m1<-makeCacheMatrix
cacheSolve(m1)
cacheSolve(m1)
source("cachematrix.R")
m1<-makeCacheMatrix
cacheSolve(m1)
source("cachematrix.R")
m1<-makeCacheMatrix
cacheSolve(m1)
inv<-null
source("cachematrix.R")
m<-matrix(c(1,1/4,2/3,3,5/7,2,4,2/3,5),nrow=3)
m1<-makeCacheMatrix
cacheSolve(m1)
library('matlab')
m<-magic(3)
m1<-makeCacheMatrix
cacheSolve(m1)
m
dir()
source("cachematrix.R")
m<-matrix(c(1,1/4,2/3,3,5/7,2,4,2/3,5),nrow=3)
m1<-makeCacheMatrix
cacheSolve(m1)
source("cachematrix.R")
m<-matrix(c(1,1/4,2/3,3,5/7,2,4,2/3,5),nrow=3)
m1<-makeCacheMatrix
cacheSolve(m1)
inv<-## Return a matrix that is the inverse of 'x'
## get the inverse of the corresponding matrix
inv <- x$getinverse()
## if inverse is not null, then it need not be computed
## the cached value will be returned
if(!is.null(inv)) {
message("getting cached data.")
return(inv)
}
## if inverse is null, it must be computed and returned
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
inv<-<-matrix(c(1,1/4,2/3,3,5/7,2,4,2/3,5),nrow=3)
inv<-matrix(c(1,1/4,2/3,3,5/7,2,4,2/3,5),nrow=3)
m<-matrix(c(1,1/4,2/3,3,5/7,2,4,2/3,5),nrow=3)
m1<-makeCacheMatrix
cacheSolve(m1)
